<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>入門 on hironeko desu</title>
    <link>http://hironeko.github.io/tags/%E5%85%A5%E9%96%80/</link>
    <description>Recent content in 入門 on hironeko desu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Tue, 09 Apr 2019 22:27:22 +0900</lastBuildDate>
    
	<atom:link href="http://hironeko.github.io/tags/%E5%85%A5%E9%96%80/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vuexに挑戦4</title>
      <link>http://hironeko.github.io/posts/201904/20190409/</link>
      <pubDate>Tue, 09 Apr 2019 22:27:22 +0900</pubDate>
      
      <guid>http://hironeko.github.io/posts/201904/20190409/</guid>
      <description>前回までのあらすじ Form の制御って箇所まで行いました。次は、テキストエリアの切り替えです。
:is とは？ お手本の Qiita の記事には補足がないので初心者は「ん？」となるでしょう。単純にこれは、　Vue が用意している省略機能の一つで完全な構文はv-bind:isです。(間違ってたらすみません)
こうやって世間の目にさらされる場所に書く際は、間違えがないだろうかとちゃんと調べて動作確認しってことをするため体系的に頭にあったことが正しい知識として登録されることに意味があると思っている。
あとは、お手本をもとに微妙に変えた書き方(spread operator)などで書きなおしつつ動作確認。
このブログもそうだけど基本自宅では、VSCode を使用しているんだけど Vue で mapGetters を記述した際に import してくれるのはいいのだがtemplateの中にぶっこまれるのはどうして。。。。
お手本のまま記述を大方終え動作確認をするとアプリっぽい感じになってきましたね。
thanks ページの作成 この章で最後ですな。
お手本通りの実装をすすめます。 ただ個人的にふと思ったのがThanks.vueにて mapActions, mapGetters を import しているけどもこれ消しても動くわけです。何か意図があったのかな？
単純この file って最後のページだから何かイベント等は、発生しないと思う。
あと一点rootState.setpCount == 2の箇所。個人的には厳密に判定してほしので===しました。
いうてここは、数値しか来ないのは、わかっているけども。基本的に業務でも==は使用しないようにしているため。ここも 3 個にした。
今回の学び 全体像は、掴めた。ただ state 関連は、色々と書き方がある点を知れたのと Vue がなぜ人気があるかなんとなくわかった。
感想が短い・・・・
さて次は何をやろうかな。 ちょっとまえに Laravel と Vue の instagram clone の記事がバズってたからそれを考えたは考えたがんー悩みどころだな。ただひたすら時間がかかりそうだ。
それか今回のアプリのように比較的細かくあーだこーだ書くのはやめて、修正を加えた箇所やお手本と違う方法を試した箇所だけピックアップするようにするか。The memo 的な投稿を一個作成するだけにするか実に悩めかしい。</description>
    </item>
    
    <item>
      <title>Vuexに挑戦3</title>
      <link>http://hironeko.github.io/posts/201904/20190402/</link>
      <pubDate>Tue, 02 Apr 2019 00:09:16 +0900</pubDate>
      
      <guid>http://hironeko.github.io/posts/201904/20190402/</guid>
      <description>前回までのあらすじ HeadComp.vue に mapGetters を導入したところまでは、やったはず。
今回は、Form.vue に mapGetters の記述を追加から進めます。
mapGetters には、書き方が色々？ お手本の書き方
computed: mapGetters(&amp;quot;Form&amp;quot;, { button: &amp;quot;getButton&amp;quot; })  このように書いている。ただ mapGetters について調べているとどうもこの書き方は見かけないぞ・・・？ということになり mapGetters とより仲良くなるために調べました。 ちなみに公式サイト
ES6 の書き方を使用して(spread operator)の書き方が紹介されている。
調べ物をしてて最終的に気づくのってやっぱ公式サイトやリファレンスって最強じゃね？って話。さらにいうと実装されている中身をみるのが一番さいつよです。ただいろんなところに記載されているコードは、良くも悪くも書き方の参考として頭の片隅に入れておくのを忘れずに。
さて実際に自分がこの場面でいいなって思った書き方は以下です。 小さな規模ならわざわざ別名でマッピングする必要もないでしょうと考えました
computed: { ...mapGetters( &#39;Form&#39;, [&#39;button&#39;] ) }  ただこのファイルで Form という文字が二回出てくる時点でどうなのって思うのも正直なところ。ただしこの書き方をした場合同時にstore/index.jsの方も書き方を変更しないといけない
例えば下記のように
getters: { button: (state, getters, rootState) =&amp;gt; state.button[rootState.stepCount] }  getters って必要なのか。。。？ちらっと最後まで見たが現状他のゲッターを受け取るようなことは書いてなかったが。。。ただ root の state へアクセスしたくまた使用したいから使わないけど第二引数に getters を書いていると言うことなのか。
引数を表にしている人がいた【Vuex】Store の各プロパティ引数メモ
ちなみに第 4 引数もあってrootGettersとかけるらしい
root の getters を使用できるってことかな。今その事案が頭に浮かばないから一旦そういうものとして先に進む</description>
    </item>
    
    <item>
      <title>Vuexに挑戦2</title>
      <link>http://hironeko.github.io/posts/201904/20190401/</link>
      <pubDate>Mon, 01 Apr 2019 00:09:15 +0900</pubDate>
      
      <guid>http://hironeko.github.io/posts/201904/20190401/</guid>
      <description>前回の続編 テキストエリアを作成する。ここは、大きく変更はなくお手本の通りに進める。 どうやらエラー文言を出力するように記述するみたですね。
さっさ先に進めます。 次は、StringComp.vueの作成
src/components/modules/以下に作成したら、Form.vueで import, components, template に追加を行う。
今回は、src/components/modules/以下に作成したものは、Form.vueで使うので忘れずに追記ですな。
イベント ボタンの作成、イベントを発火させるためにv-onディレクティブを使う。
そのまま写経するのは、簡単だがちゃんと理解は必要だね。
vue のメソッドを使用するみたですね。なぜ使うの、何が実現できるかくらいは把握すべきなのでちょっと調べます。
調べているうちにmapActionとmapGettersは、Vuex の学習でかなーーーり重要とわかる。
コンポーネント内のアクションのディスパッチ 正攻法のやりかたthis.$store.dispatch(&#39;xxx&#39;)で可能だがちゃーーーんと便利なヘルパーを用意してくれているのが Vuex のようですな。それが今回学ぶものの一つmapActionsである。(公式サイト)
よは、簡単にコンポーネント内のアクションを使おうぜ！と今は、把握しておく。 これを利用する際、必ず Vue インスタンスにstoreを追加しないといけない
mapGetters も同様 この編集では、mapGetters が使われていないように見えるがこのあとちゃんと使用している。 this.$store.getters[&#39;SOME&#39;]
store の作成 mapActions を使用するので store を追加する必要がある。先にmain.jsの修正を行うようだ。
この時点は、storeフォルダすら存在していないため保存したらエラーが発生する。フォルダと index.js を作成した段階でエラーが消える。
作成の順番が本当に正しいのか不明だけどここでふと思ったのは、mapActions の第一引数は、namespaced になっている。store の index.js で作成している const 名であるわけで、最初に store を作成すべきでは・・・？と思ったが結果動くなら順番なんて関係ないけどもふと気になった。
すべての実装を行い終わったら画面の確認ボタンを押下すると console にbuttonActionが出力される。なんと！！！！
実装してて、公式の解説を読んだりしてたけどもなるほどねー感覚的には理解しているがあくまで感覚なのでさらに深めたいですね。何個も作成して
Vuex 今回の大本命。ここまでの Vuex 自体は、出てはきているがなぜ必要なのか、何をするものなのかって言うのがここで解説をしてくださっている。
若干疑問なのは、HeadComp の title を computed で mapGetters？別にキャッシュする必要なくない？って思って公式見たらどうやらお作法っぽい
あと mapgetters の記述が人によって結構異なっている。おおよそは。module-typeってフォルダ以下にファイルを作成してそれらを import してッシ要している感じ。作成したファイルには、export defaultで const を export している感じ</description>
    </item>
    
    <item>
      <title>Vuexに挑戦！！</title>
      <link>http://hironeko.github.io/posts/201903/20190330/</link>
      <pubDate>Sat, 30 Mar 2019 00:05:43 +0900</pubDate>
      
      <guid>http://hironeko.github.io/posts/201903/20190330/</guid>
      <description>何事も手を動かすことが大事 Qiita の記事(下記記載)では、いきなりVuexの導入から始まっているがリンクにある gist のページを見るとVueの環境構築から手順があるのでわからない人は参考にしましょう。
例によって Linter は、今回も抜きます。というのも今回は、構文に敏感に注意するより手を動かして Vue と仲良くなるのが目的なのでそこは、捨てます。実際の開発では、大切な要素であることは忘れずに進めます。
自分は以下のように設定しました。
? Project name your_app_name ? Project description A Vue.js project ? Author hironeko &amp;lt;xxxxxxxx@exsample.com&amp;gt; ? Vue build standalone ? Install vue-router? Yes ? Use ESLint to lint your code? No ? Set up unit tests No ? Setup e2e tests with Nightwatch? No ? Should we run `npm install` for you after the project has been created? (recommended) yarn  Vuex を install さっそく install するみたいですね。待ってました。</description>
    </item>
    
    <item>
      <title>Vueに入門してみよう</title>
      <link>http://hironeko.github.io/posts/201903/20190326/</link>
      <pubDate>Tue, 26 Mar 2019 23:14:50 +0900</pubDate>
      
      <guid>http://hironeko.github.io/posts/201903/20190326/</guid>
      <description>Vue をちゃんと入門 触ったことある。けど業務では未使用だし本格的には触っていない。だもんでちゃんと入門してみることにした(復習の意味も込めて)
参考にするもの 本家を参考にしつつ、無料で実装動画が見れるのでそれを写経をしていこうかと
Vue はでっかい object？ var app = new Vue({ el: &amp;quot;#app&amp;quot;, data: { message: &amp;quot;Hello Vue!&amp;quot; } })  例えばこれのmessageを変更する場合app.message = &#39;change value&#39;;のようにすれば変更ができる
でかい object にしか見えない&amp;hellip;..
ループ 例えばこんな配列があったとします。これを順に表示する場合
var app = new Vue({ el: &amp;quot;#app&amp;quot;, data: { todos: [ { text: &amp;quot;frist text&amp;quot; }, { text: &amp;quot;second text&amp;quot; }, { text: &amp;quot;thead text&amp;quot; } ] } })  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;ol&amp;gt; &amp;lt;li v-for=&amp;quot;todo in todos&amp;quot;&amp;gt; {{ todo.</description>
    </item>
    
    <item>
      <title>ReactでイベントとStateの再入門してみた</title>
      <link>http://hironeko.github.io/posts/201903/20190325/</link>
      <pubDate>Mon, 25 Mar 2019 01:02:21 +0900</pubDate>
      
      <guid>http://hironeko.github.io/posts/201903/20190325/</guid>
      <description>イベント入門 import React from &amp;quot;react&amp;quot; class App extends React.Component { render() { retrun() /* ここに描く処理 */ } }  大枠は上記に記載している内容。以降は、フォーカスして復習をする
&amp;lt;button onClick={() =&amp;gt; { console.log(&amp;quot;First Event!!&amp;quot;) }} &amp;gt; 初めてのイベント &amp;lt;/button&amp;gt;  するとブラウザの developer tools の console で確認ができる
State 入門 何かの動作にたいして何かを変えるようにする動作がアプリケーションには必須。
この動作に合わせて変更される値のことを React だと State と呼ばれる。
React は、classを作成する際にReact.Componentをextendsして作成します。その際constructor(props) { ....}を記述し、stateを定義します
定義したstateをrender内にて使用する際は、this.stateで代入したオブジェクトを使用できます(ただこの使用方法は基本しないと思います)
this.state.定義したプロパティ名の形で使用すると認識しておく
では、何かのイベントで state の値を更新(変更)する場合は？？ this.setSate({プロパティ名:変更する値})となります
注意として
this.state = {定義済みプロパティ:値}, this.state.name = &#39;値&#39;という方法では、行いません。
同じイベントでクリックされるものによって更新する値が違うだけの場合 class 内にメソッドとして作成するといいことがあるなので実際に書いてみようと思う。今回は、イベントは一個だがメソッドを作成してみる
// .... class App extends React.</description>
    </item>
    
  </channel>
</rss>