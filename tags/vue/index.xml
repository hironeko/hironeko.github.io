<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vue on hironeko desu</title>
    <link>http://hironeko.github.io/tags/vue/</link>
    <description>Recent content in Vue on hironeko desu</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja</language>
    <lastBuildDate>Wed, 26 Jun 2019 22:53:16 +0900</lastBuildDate>
    
	<atom:link href="http://hironeko.github.io/tags/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>vuepressを触ってみた</title>
      <link>http://hironeko.github.io/posts/201906/20190626/</link>
      <pubDate>Wed, 26 Jun 2019 22:53:16 +0900</pubDate>
      
      <guid>http://hironeko.github.io/posts/201906/20190626/</guid>
      <description>目的  Go の勉強で Hugo を触ってみたものの自分としては、んー今じゃない感がありました。機能としては十分だし、成熟しつつあるドキュメントも多いんだけども Go をちゃんと学習してからだなと思った次第  ちゃんとというのは曖昧で正確に言えば基礎を一通りしてからでってことですね。最初の過程をすっ飛ばしました。  そこで代わりになるものはないかなーできれば Vue か React 関連で。。。っとおもったら vuepress なるものがあるらしいとのことで触ってみた  触った所感  わかりやすい。ただその一言ですね。ただ日本語ドキュメントは、Hugo とくらべてあまりない印象  コードを書いた際のスニペットもいい感じでした。 絵文字も見れますしね。  ひとまず導入手順のみ書き残そうと思った次第です  導入手順 VuePress 下記コマンドを実行
yarn init yarn add -D vuepress echo &#39;# Hello VuePress&#39; &amp;gt; README.md  package.json に追加
&amp;quot;scripts&amp;quot;: { &amp;quot;dev&amp;quot;: &amp;quot;vuepress dev&amp;quot;, &amp;quot;build&amp;quot;: &amp;quot;vuepress build&amp;quot; },  yarn dev // サーバーを起動しブラウザで確認 yarn build // buildを行いディレクトリを作成 touch .vuepress/config.js  以下を記述 base: &amp;lsquo;/dirName/&amp;rsquo; // GitHub Pages の公開ディレクトリ dest: &amp;lsquo;docs/&amp;rsquo;, // build 時の出力先指定</description>
    </item>
    
    <item>
      <title>Vuexに挑戦2</title>
      <link>http://hironeko.github.io/posts/201904/20190401/</link>
      <pubDate>Mon, 01 Apr 2019 00:09:15 +0900</pubDate>
      
      <guid>http://hironeko.github.io/posts/201904/20190401/</guid>
      <description>前回の続編 テキストエリアを作成する。ここは、大きく変更はなくお手本の通りに進める。 どうやらエラー文言を出力するように記述するみたですね。
さっさ先に進めます。 次は、StringComp.vueの作成
src/components/modules/以下に作成したら、Form.vueで import, components, template に追加を行う。
今回は、src/components/modules/以下に作成したものは、Form.vueで使うので忘れずに追記ですな。
イベント ボタンの作成、イベントを発火させるためにv-onディレクティブを使う。
そのまま写経するのは、簡単だがちゃんと理解は必要だね。
vue のメソッドを使用するみたですね。なぜ使うの、何が実現できるかくらいは把握すべきなのでちょっと調べます。
調べているうちにmapActionとmapGettersは、Vuex の学習でかなーーーり重要とわかる。
コンポーネント内のアクションのディスパッチ 正攻法のやりかたthis.$store.dispatch(&#39;xxx&#39;)で可能だがちゃーーーんと便利なヘルパーを用意してくれているのが Vuex のようですな。それが今回学ぶものの一つmapActionsである。(公式サイト)
よは、簡単にコンポーネント内のアクションを使おうぜ！と今は、把握しておく。 これを利用する際、必ず Vue インスタンスにstoreを追加しないといけない
mapGetters も同様 この編集では、mapGetters が使われていないように見えるがこのあとちゃんと使用している。 this.$store.getters[&#39;SOME&#39;]
store の作成 mapActions を使用するので store を追加する必要がある。先にmain.jsの修正を行うようだ。
この時点は、storeフォルダすら存在していないため保存したらエラーが発生する。フォルダと index.js を作成した段階でエラーが消える。
作成の順番が本当に正しいのか不明だけどここでふと思ったのは、mapActions の第一引数は、namespaced になっている。store の index.js で作成している const 名であるわけで、最初に store を作成すべきでは・・・？と思ったが結果動くなら順番なんて関係ないけどもふと気になった。
すべての実装を行い終わったら画面の確認ボタンを押下すると console にbuttonActionが出力される。なんと！！！！
実装してて、公式の解説を読んだりしてたけどもなるほどねー感覚的には理解しているがあくまで感覚なのでさらに深めたいですね。何個も作成して
Vuex 今回の大本命。ここまでの Vuex 自体は、出てはきているがなぜ必要なのか、何をするものなのかって言うのがここで解説をしてくださっている。
若干疑問なのは、HeadComp の title を computed で mapGetters？別にキャッシュする必要なくない？って思って公式見たらどうやらお作法っぽい
あと mapgetters の記述が人によって結構異なっている。おおよそは。module-typeってフォルダ以下にファイルを作成してそれらを import してッシ要している感じ。作成したファイルには、export defaultで const を export している感じ</description>
    </item>
    
    <item>
      <title>Vuexに挑戦！！</title>
      <link>http://hironeko.github.io/posts/201903/20190330/</link>
      <pubDate>Sat, 30 Mar 2019 00:05:43 +0900</pubDate>
      
      <guid>http://hironeko.github.io/posts/201903/20190330/</guid>
      <description>何事も手を動かすことが大事 Qiita の記事(下記記載)では、いきなりVuexの導入から始まっているがリンクにある gist のページを見るとVueの環境構築から手順があるのでわからない人は参考にしましょう。
例によって Linter は、今回も抜きます。というのも今回は、構文に敏感に注意するより手を動かして Vue と仲良くなるのが目的なのでそこは、捨てます。実際の開発では、大切な要素であることは忘れずに進めます。
自分は以下のように設定しました。
? Project name your_app_name ? Project description A Vue.js project ? Author hironeko &amp;lt;xxxxxxxx@exsample.com&amp;gt; ? Vue build standalone ? Install vue-router? Yes ? Use ESLint to lint your code? No ? Set up unit tests No ? Setup e2e tests with Nightwatch? No ? Should we run `npm install` for you after the project has been created? (recommended) yarn  Vuex を install さっそく install するみたいですね。待ってました。</description>
    </item>
    
    <item>
      <title>Vueで1ページアプリ</title>
      <link>http://hironeko.github.io/posts/201903/20190329/</link>
      <pubDate>Fri, 29 Mar 2019 00:05:20 +0900</pubDate>
      
      <guid>http://hironeko.github.io/posts/201903/20190329/</guid>
      <description>Vue.js だけでひとまず何かを作成 今回は、時計のアプリケーションを写経。Linter は使用せずです。
進め方は参考サイトを元に進めました。
CSS はコピペしたがそれ以外は写経、手に馴染めば何も考えなくても手が勝手に動くようになるものなので。戦地の道も一歩からですね。
今回のアプリの写経での学び computedの挙動 ただし年月日時分の箇所すかね。
秒は、method でもいいわけですね。
例えば、このコードでは、computed にsecondsを methods に移動させます。
seconds() { return zeroPadding(this.date.getSeconds(), 2) }  としtemplateの方は、seconds &amp;gt; seconds()に変更し再起動しても変化がありません。
値に変化が起きない限り再計算処理が走らないのが computed です。 computed の使うポイントとしては、キャッシュしたい何かを返す必要がある(再計算する必要が低い)場合に適任
methods に関しては、算出(計算)結果のキャッシュはされません。
日本語で説明を書くには、ちょっと通じにくい文章になりますな。
大雑把に基礎の学習を終えひとまず何かしら作って手に馴染ませる ということで次は、vuex を使用しての学習。以前 component についは、重要と言う話だったがここで実際に手を動かし学習を進める。
下記参考サイトのvue.js＋Vuexチュートリアルを参考に進める。(1 年前のものなので必要に応じて適宜変更を加えながら進める)
参考サイト 第一回 Vue.js で Web アプリをつくろう！
vue.js ＋ Vuex チュートリアル</description>
    </item>
    
    <item>
      <title>Vueに入門してみよう</title>
      <link>http://hironeko.github.io/posts/201903/20190326/</link>
      <pubDate>Tue, 26 Mar 2019 23:14:50 +0900</pubDate>
      
      <guid>http://hironeko.github.io/posts/201903/20190326/</guid>
      <description>Vue をちゃんと入門 触ったことある。けど業務では未使用だし本格的には触っていない。だもんでちゃんと入門してみることにした(復習の意味も込めて)
参考にするもの 本家を参考にしつつ、無料で実装動画が見れるのでそれを写経をしていこうかと
Vue はでっかい object？ var app = new Vue({ el: &amp;quot;#app&amp;quot;, data: { message: &amp;quot;Hello Vue!&amp;quot; } })  例えばこれのmessageを変更する場合app.message = &#39;change value&#39;;のようにすれば変更ができる
でかい object にしか見えない&amp;hellip;..
ループ 例えばこんな配列があったとします。これを順に表示する場合
var app = new Vue({ el: &amp;quot;#app&amp;quot;, data: { todos: [ { text: &amp;quot;frist text&amp;quot; }, { text: &amp;quot;second text&amp;quot; }, { text: &amp;quot;thead text&amp;quot; } ] } })  &amp;lt;div id=&amp;quot;app&amp;quot;&amp;gt; &amp;lt;ol&amp;gt; &amp;lt;li v-for=&amp;quot;todo in todos&amp;quot;&amp;gt; {{ todo.</description>
    </item>
    
  </channel>
</rss>